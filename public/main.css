/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
.detail, .preloader {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

.dg.ac {
  z-index: 9999 !important;
}

.preloader__number {
  font-size: 1.4rem;
}

body {
  font-size: 1.6rem;
}

.preloader__text {
  font-family: "George X";
  font-size: 5.3rem;
}

/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

@font-face {
  font-family: "$font-george-x";
  src: url(george-x-regular.woff2) format("woff2"), url(george-x-regular.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "$font-suisse-bp";
  src: url(suisse-bp-light.woff2) format("woff2"), url(suisse-bp-light.woff) format("woff");
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "$font-suisse-bp";
  src: url(suisse-bp-regular.woff2) format("woff2"), url(suisse-bp-regular.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "$font-suisse-bp";
  src: url(suisse-bp-ultralight.woff2) format("woff2"), url(suisse-bp-ultralight.woff) format("woff");
  font-weight: 200;
  font-style: normal;
  font-display: swap;
}
html {
  font-size: 1.0416666667vw;
}

body {
  font-family: "Suisse BP Int'l";
}
@media (max-width: 767px) {
  body {
    font-size: 100px;
  }
}

.preloader {
  background-color: #c97164;
  color: #fff;
  align-items: center;
  display: none;
  justify-content: center;
  text-align: center;
}

.preloader__text {
  max-width: 66rem;
}

.preloader__number {
  bottom: 7.3rem;
  left: 50%;
  position: absolute;
  transform: translateX(-50%);
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/